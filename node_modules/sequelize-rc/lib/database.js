'use strict';

const util      = require('lodash');
const Sequelize = require('sequelize');
const request   = require('request');
const fs        = require('fs');
const Path      = require('path');

let DB = function() { };
DB.prototype = {};

DB.prototype.getDBPwd = function(callback) {
    let group = this.group;
    let dataId = this.dataId;
    let pwd = this.pwd;

    let pwdServer = 'http://nb.raycloud.com';
    request({
        url: pwdServer + '?group=' + group +
            '&dataId=' + dataId + '&env='+this.env + '&pwd='+ pwd
    }, callback);
}

DB.prototype.init = function(cfg, next) {
    next = next || function() {};
    if (this.initialized) return;
    if(!cfg.host || !cfg.username || !cfg.database) {
        return next({
            message: '缺少参数'
        });
    }

    this.group  = cfg.group;
    this.dataId = cfg.dataId;
    this.env    = cfg.env || 'dev';
    this.pwd    = cfg.password;
    this.modelPath = cfg.modelPath;
    let logging = cfg.logging;
    if(logging) {
        logging = console.log;
    } else logging = false;
    let pool = cfg.pool || {
        max: 5,
        min: 0,
        idle: 10000
    };

    this.getDBPwd((err, rsp) => {
        if(err) return next(err);

        this.sequelize = new Sequelize(
            cfg.database,
            cfg.username,
            rsp.body,
            {
                port:     cfg.port || 3306,
                timezone: '+08:00UTC',
                host:     cfg.host,
                dialect:  'mysql',
                logging:  logging,
                pool: pool,
            }
        );
        this.hackSequelize();

        if(this.modelPath) {
            this.loadModels(this.modelPath);
        }
        this.initialized = true;
        next();
    });
}

DB.prototype.getModel = function(name) {
    return this.sequelize.model(name);
}

DB.prototype.hackSequelize = function() {
    var _define = Sequelize.prototype.define;
    Sequelize.prototype.define = function(modelName, attributes, options) {
        options = util.defaults({}, options, {
            createdAt: 'created_at',
            updatedAt: 'updated_at',
            deletedAt: 'deleted_at',
        });
        _define.call(this, modelName, attributes, options);
    };
}

DB.prototype.loadModel = function(path) {
    require(path).model(this.sequelize, Sequelize);
}

DB.prototype.loadModels = function(folder) {
    let filenames = fs.readdirSync(folder);
    let self = this;
    filenames.map((file) => {
        self.loadModel(Path.join(folder, file));
    });
}

module.exports = new DB();

/*
function createTables(options) {
    sequelize.sync(options);
}

function dropTables() {
    sequelize.drop();
}
*/
